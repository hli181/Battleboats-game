import java.util.Scanner;

public class Game {
    private int turn;
    private int missileLeft;
    private int droneLeft;
    private int cannon;
    private Board playerBoard;
    private Board gameBoard;
    private boolean status;
    private static int highest = 0;

    public Game (String mode){
        playerBoard = new Board(mode);// playerboard tracks only what player should see, no actually ship
        gameBoard = new Board(mode);
        gameBoard.placeBoats();// reference board, keep track of both hits, miss, and where the boats are
        //playerBoard = gameBoard; //let there are same boats distribution on the board.
        status =false;// if the game is ended(all boats sunk
        turn = 0;
        playerBoard.display();
        System.out.println("----------------------");
        cannon = 0;
        if (mode.equals("Standard") || mode.equals("standard")){
            missileLeft = 1;
            droneLeft = 1;
        }else{
            missileLeft = 2;
            droneLeft = 2;
        }
    }

    public String fire(int x, int y) {// handles the result of firing
        if (x < playerBoard.getRows() && y < playerBoard.getCols() && x >= 0 && y >= 0) {
            if (playerBoard.getArray()[x][y].equals(" X ")) {
                return ("again");
            }
            else if (gameBoard.getArray()[x][y].equals(" - ")) {
                playerBoard.getArray()[x][y] = " O ";
                gameBoard.getArray()[x][y] = " O ";
                cannon++;
                return ("miss");
            }else{
                playerBoard.getArray()[x][y] = " X ";
                gameBoard.getArray()[x][y] = " X ";
                cannon++;
                return ("hit");
            }
        }else{
            return("penalty");
        }
    }

    public void processFire(){// handles input and output for firing, choice and determine whether game ended
        int num = 0;
        Scanner input = new Scanner(System.in);
        System.out.print("Please enter the coordinate you want to fire at: ");
        String coordinate = input.nextLine();// has to be in form 2 2
        if (coordinate.equals("print")){
            gameBoard.display();
            System.out.print("Please reenter: ");
            coordinate = input.nextLine();
            String[] coorParts = coordinate.split(" ");
            String result = fire(Integer.parseInt(coorParts[0]),Integer.parseInt(coorParts[1]));// parse input
            if (result.equals("hit")){
                for (int i = 0; i < playerBoard.getRows(); i++) {
                    for (int j = 0; j < playerBoard.getCols(); j++) {
                        if (gameBoard.getArray()[i][j].equals(" X ")){
                            num ++;
                        }
                    }
                }
                System.out.println("Turn: "+ turn+result);
                if (num == 17 && playerBoard.getMode().equals("Standard")||num == 34 && playerBoard.getMode().equals("Expert")){
                    status = true;
                }
            }
        }else{
            String[] coorParts = coordinate.split(" ");
            String result = fire(Integer.parseInt(coorParts[0]),Integer.parseInt(coorParts[1]));
            if(result.equals("penalty")){
                turn++;
                System.out.println("Turn "+ turn + " :The user selects " + "(" + Integer.parseInt(coorParts[0]) + "," + Integer.parseInt(coorParts[1]) + ") which is out of bounds. Penalty");
                turn++;
                System.out.println("Turn: "+ turn + " :Skipped");
            }
            else if(result.equals("hit")){
                turn++;
                System.out.println("Turn "+ turn + " :hit");
            }
            else if(result.equals("miss")){
                turn++;
                System.out.println("Turn: "+ turn + " :miss");
            }
            else if(result.equals("again")){
                turn++;
                System.out.println("Turn: "+ turn+" :The user selects " + "(" + Integer.parseInt(coorParts[0]) + "," + Integer.parseInt(coorParts[1]) + ") again, Penalty");
                turn++;
                System.out.println("Turn: "+ turn + " :Skipped");
            }
            playerBoard.display();
            if (result.equals("hit")){
                for (int i = 0; i < playerBoard.getRows(); i++) {
                    for (int j = 0; j < playerBoard.getCols(); j++) {
                        if (gameBoard.getArray()[i][j].equals(" X ")){
                            num ++;
                        }
                    }
                }
                if (num == 17 && playerBoard.getMode().equals("Standard")||num == 34 && playerBoard.getMode().equals("Expert")){
                    status = true;
                }
            }
        }
    }

    public int drone(){//x is number of row or column, rc is row or column(true is row)
        int count = 0;
        turn ++;
        droneLeft--;
        int xi = 0 ;
        System.out.print("Would you like to scan a row or column?: ");
        Scanner input = new Scanner(System.in);
        String rc = input.nextLine();
        if (rc.equals("print")){//handle if user do print at this point
            gameBoard.display();
            System.out.print("reenter please: ");
            rc = input.nextLine();
            System.out.print("which " + rc + " number?: ");
            String x = input.nextLine();
            if (x.equals("print")) {//further handling print
                gameBoard.display();
                System.out.print("reenter please: ");
                x = input.nextLine();
                xi = Integer.parseInt(x);
            } else {
                xi = Integer.parseInt(x);
            }

            if (rc.equals("row")||rc.equals("rows")){//if checking rows
                for (int i = 0; i<playerBoard.getCols();i++){//loop through the entire row
                    if (!gameBoard.getArray()[xi][i].equals(" - ")){//if not empty add one to count
                        count++;
                    }
                }
            }else{
                for (int i = 0; i<playerBoard.getRows();i++){// same for columns
                    if (!gameBoard.getArray()[i][xi].equals(" - ")){
                        count++;
                    }
                }
            }
        }else {
            System.out.print("which " + rc + " number?: ");
            String x = input.nextLine();
            if (x.equals("print")) {
                playerBoard.display();
                x = input.nextLine();
                xi = Integer.parseInt(x);
            } else {
                xi = Integer.parseInt(x);
            }
            if (rc.equals("row")||rc.equals("rows")){
                for (int i = 0; i<playerBoard.getCols();i++){
                    if (!gameBoard.getArray()[xi][i].equals(" - ")){
                        count++;
                    }
                }
            }else{
                for (int i = 0; i<playerBoard.getRows();i++){
                    if (!gameBoard.getArray()[i][xi].equals(" - ")){
                        count++;
                    }
                }
            }
        }
        System.out.println("Turn: "+turn);
        System.out.println("There are "+count+" occupied tile in the " + xi + " "+ rc);
        return count;
    }

    public int[] missile(int x, int y) {
        //handle the result of the missile.need to return hit or not, print out how many, and change the playerBoard display
        int hit = 0;
        int miss = 0;
        int cover = 0;    //count how many points were attacked
        String[] r = new String[9];
        if (x + 1 < playerBoard.getRows() && y + 1 < playerBoard.getCols() && x - 1 >= 0 && y - 1 >= 0) {
            r[0] = fire(x, y);
            r[1] = fire(x, y - 1);
            r[2] = fire(x, y + 1);
            r[3] = fire(x - 1, y);
            r[4] = fire(x + 1, y);
            r[5] = fire(x - 1, y - 1);
            r[6] = fire(x + 1, y - 1);
            r[7] = fire(x + 1, y + 1);
            r[8] = fire(x - 1, y + 1);
            for (int i = 0; i < 9; i++) {
                if (r[i].equals("hit")) {
                    hit++;
                    cover++;
                } else if (r[i].equals("miss")) {
                    miss++;
                    cover++;
                }
            }
        } else if (x - 1 < 0) {    // at (0,y) axis, there are (0,0) and (0,7)
            if (y - 1 < 0) {   //check for (0,0)
                r[0] = fire(x, y);
                r[1] = fire(x, y + 1);
                r[2] = fire(x + 1, y);
                r[3] = fire(x + 1, y + 1);
                for (int i = 4; i < 9; i++) {
                    r[i] = "null";
                }
            }
            else if(y+1 > playerBoard.getCols()){   //check for(0,7)
                r[0] = fire(x, y);
                r[1] = fire(x, y - 1);
                r[2] = fire(x + 1, y);
                r[3] = fire(x + 1, y - 1);
                for (int i = 4; i < 9; i++) {
                    r[i] = "null";
                }
            }
            else {
                r[0] = fire(x, y);
                r[1] = fire(x, y - 1);
                r[2] = fire(x, y + 1);
                r[3] = fire(x + 1, y);
                r[4] = fire(x + 1, y - 1);
                r[5] = fire(x + 1, y + 1);
                for (int i = 6; i < 9; i++) {
                    r[i] = "null";
                }
            }
            for (int i = 0; i < 9; i++) {
                if (r[i].equals("hit")) {
                    hit++;
                    cover++;
                } else if (r[i].equals("miss")) {
                    miss++;
                    cover++;
                }

            }
        }
        else if (y - 1 < 0) {        //at (x,0) axis
            if (x + 1 > playerBoard.getRows()) {         //check for(7,0)
                r[0] = fire(x, y);
                r[1] = fire(x - 1, y);
                r[2] = fire(x, y + 1);
                r[3] = fire(x - 1, y + 1);
                for (int i = 4; i < 9; i++) {
                    r[i] = "null";
                }
            } else {
                r[0] = fire(x, y);
                r[1] = fire(x, y + 1);
                r[2] = fire(x - 1, y);
                r[3] = fire(x - 1, y + 1);
                r[4] = fire(x + 1, y);
                r[5] = fire(x + 1, y + 1);
                for (int i = 6; i < 9; i++) {
                    r[i] = "null";
                }
            }
            for (int i = 0; i < 9; i++) {
                if (r[i].equals("hit")) {
                    hit++;
                    cover++;
                } else if (r[i].equals("miss")) {
                    miss++;
                    cover++;
                }
            }
        } else if (x + 1 >= playerBoard.getRows()) {  //at (7,y) axis
            if (y + 1 > playerBoard.getCols()) {  //check for (7,7)
                r[0] = fire(x, y);
                r[1] = fire(x - 1, y);
                r[2] = fire(x, y - 1);
                r[3] = fire(x - 1, y - 1);
                for (int i = 4; i < 9; i++) {
                    r[i] = "null";
                }
            } else {
                r[0] = fire(x, y);
                r[1] = fire(x, y + 1);
                r[2] = fire(x, y - 1);
                r[3] = fire(x - 1, y + 1);
                r[4] = fire(x - 1, y);
                r[5] = fire(x - 1, y - 1);
                for (int i = 6; i < 9; i++) {
                    r[i] = "null";
                }
            }
            for (int i = 0; i < 9; i++) {
                if (r[i].equals("hit")) {
                    hit++;
                    cover++;
                } else if (r[i].equals("miss")) {
                    miss++;
                    cover++;
                }
            }
        }
        else if (y + 1 >= playerBoard.getCols()) {    //at(x,7)axis
                r[0] = fire(x, y);
                r[1] = fire(x, y - 1);
                r[2] = fire(x - 1, y);
                r[3] = fire(x - 1, y - 1);
                r[4] = fire(x + 1, y);
                r[5] = fire(x + 1, y - 1);
                for (int i = 6; i < 9; i++) {
                    r[i] = "null";
                }
            for (int i = 0; i < 9; i++) {
                if (r[i].equals("hit")) {
                    hit++;
                    cover++;
                } else if (r[i].equals("miss")) {
                    miss++;
                    cover++;

                }
            }
        }
        int[] situation = {hit, miss, cover};
        return situation;
    }


    public void processMissile() {//handle the target of missile, checks the result if the game has ended
        int num = 0;
        turn++;
        missileLeft--;
        Scanner input = new Scanner(System.in);
        System.out.print("Please enter the coordinate you want to launch missile at: ");
        String coordinate = input.nextLine();
        if (coordinate.equals("print")) {
            gameBoard.display();
            System.out.print("Please reenter: ");
            coordinate = input.nextLine();
            String[] coorParts = coordinate.split(" ");
            int[] s = missile(Integer.parseInt(coorParts[0]), Integer.parseInt(coorParts[1])); // s count the number of miss and hit and the number of change
            System.out.println("Turn"+ turn + ": Missile");
            System.out.println("Launch Missile get " + s[0] + " hit" +" " + s[1] + " miss, " + s[2]+ " are in scope");
            playerBoard.display();
        }
        else{
            String[] coorParts = coordinate.split(" ");
            int[] s = missile(Integer.parseInt(coorParts[0]), Integer.parseInt(coorParts[1])); // s count the number of miss and hit and the number of change
            System.out.println("Turn"+ turn + ": Missile");
            System.out.println("Launch Missile get " + s[0] + " hit" +" " + s[1] + " miss, " + s[2]+ " are in scope");
            playerBoard.display();
            if (num == 17 && playerBoard.getMode().equals("Standard") || num == 34 && playerBoard.getMode().equals("Expert")) {
                status = true;
            }
            if (num == 17 && playerBoard.getMode().equals("Standard") || num == 34 && playerBoard.getMode().equals("Expert")) {
                status = true;
            }
        }
        for (int i = 0; i < playerBoard.getRows(); i++) {
            for (int j = 0; j < playerBoard.getCols(); j++) {
                if (gameBoard.getArray()[i][j].equals(" X ")) {
                    num++;
                }
            }
        }
    }


    public static void main(String[] args){
        boolean exit = true;
        while (exit != false){
            Scanner input = new Scanner(System.in);
            System.out.print("Welcome to Battleship, what level do you want to play: ");
            String level = input.nextLine();
            Game game1 = new Game(level);
            while (game1.status == false){
                System.out.println("please choose the following options:\n1. Fire Cannon\n2. Drone Recon\n3. Launch Missile");
                String opt = input.nextLine();
                if (opt.equals("1") || opt.equals("Fire Cannon") ||opt.equals("Cannon")){//option for canon fire
                    game1.processFire();
                    System.out.println("----------------------");
                }else if(opt.equals("2") || opt.equals("Drone Recon") ||opt.equals("Drone")){//option for drone
                    if (game1.droneLeft>0){
                        game1.drone();
                    }else{
                        System.out.println("run out of drones");
                    }
                    System.out.println("----------------------");

                }else if(opt.equals("3") || opt.equals("Launch Missile") ||opt.equals("Missile")){//option for missile attack
                    if(game1.missileLeft>0){
                        game1.processMissile();
                    }
                    else{
                        System.out.println("run out of missile");
                    }
                    System.out.println("----------------------");

                }else if (opt.equals("print")){
                    game1.gameBoard.display();
                    System.out.println("----------------------");
                }else if (opt.equals("exit")){
                    break;
                }
            }

            System.out.println("Thanks for playing the game. Your score is: " + game1.turn);
            System.out.println("High score is " + highest);
            if (game1.turn<highest){
                System.out.println("congratulation on beating the high score");
                highest = game1.turn;
            }
            System.out.println("Another game? Yes/No");
            String yn = input.nextLine();
            if (yn.equals("no")||yn.equals("No")){exit = false;}

        }
    }
}

